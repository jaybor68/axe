#!/usr/bin/env bash
#
# Simple credentials report
#

##############################################################################
# Shell Behaviour
##############################################################################

# Check for unbound variables being used
# set -o nounset

# Exit is a bad command is attempted. If you're going to handle errors then
# leave this disabled
# set -o errexit

# Exit if any of the commands in a pipeline exit with a non-zero exit code
# set -o pipefail

##############################################################################
# Variables
##############################################################################

CONST_COMMAND_LINE="$@"
CONST_OS_VERSION=$(uname -r)
CONST_SYSTEM_TYPE=$(uname -m)
CONST_SCRIPT_NAME=${0##*/}

# The PROJECT_ROOT is TWO level up from where the scripts run in the
# 'bin/subcommands' directory
PROJECT_ROOT=$( cd "$( dirname "${BASH_SOURCE[0]}" )/../../" && pwd )

# Load the Frameverk
. ${PROJECT_ROOT}/etc/axerc

# Current logging config
TTY_OUTPUT_ENABLED=$TRUE
LOG_OUTPUT_ENABLED=$TRUE
SYSLOG_OUTPUT_ENABLED=$FALSE
EVENT_OUTPUT_ENABLED=$TRUE
export TTY_OUTPUT_ENABLED LOG_OUTPUT_ENABLED SYSLOG_OUTPUT_ENABLED EVENT_OUTPUT_ENABLED

# Default log file
DEFAULT_OUT="${PROJECT_ROOT}/log/${CONST_SCRIPT_NAME}.log"
# Define somewhere for specific log messages to go
EVENT_LOG="${PROJECT_ROOT}/log/${CONST_SCRIPT_NAME}_events.log"
export DEFAULT_OUT EVENT_LOG

# Trap  abnormal termination
trap cleanup 1 2 3 15


##############################################################################
# Functions
##############################################################################

show_usage() {
    cat <<EOF
usage: $CONST_SCRIPT_NAME [--help] [-f <FORMAT>]

The output format can be changed by using one of the supported formats:

plain, simple, grid, fancy_grid, pipe, orgtbl, rst, mediawiki, html, latex,
latex_booktabs, tsv (default: simple)

EOF
}


cleanup() {
    echo "Exiting."
    exit 1
}


# show help for no arguments if stdin is a terminal
if [ "$1" == '-h' ] || [ "$1" == '--help' ] || [ "$1" == 'help' ]
then
    show_usage
    exit 0
fi

# As there's only 1 option it's value will be in $2
output_format="${2:-simple}"


##############################################################################
# Main Script
##############################################################################

buffer=$(mktemp ${PROJECT_ROOT}/tmp/iam-buffer.XXXXXXX)

_log "$LINENO" "Building a list of IAM users"
aws iam list-users --output=table > $buffer

if [ $? -eq 0 ]; then
    num_users=$(wc -l $buffer | awk '{print $1}')
    _log "$LINENO" "Querying each user (${num_users} users). Be patient."
    cat $buffer \
    | awk -F'|' '{print $8}' \
    | strings \
    | grep '^  [a-zA-Z].*' \
    | sed -e 's/^ *//g;s/ *$//g' \
    | sort \
    | xargs -i aws iam list-access-keys --output=text --user-name '{}' \
    | awk 'BEGIN { print "Username, Status, Created Date, API Key" } { printf "%s,%s,%s,%s\n", $5, $4, $3, $2 }' \
    | tabulate --header -s ',' -f ${output_format}
fi

[ -f $buffer ] && rm -f $buffer
