#!/usr/bin/env python

"""
Used to list the available environment stacks found within a given stack base
directory (cb-root).

Usage:
    axe-env-list [options]
    axe-env-list ( -h | --help )

Options:
    -c <cb-root>, --cb-root=<cb-root>
                         The $CLOUDBUILDER_ROOT defaults to ~/.cloudbuilder but
                         can be overridden if required. [default: ~/.cloudbuilder]
    -f <format>, --format=<format>
                         Supported values are; plain, simple, grid, pipe,
                         orgtbl, rst, mediawiki, latex [default: simple]
    -h, --help           Show this help message and exit
    --debug              Show more verbose logging

"""
from future.utils import iteritems

import os
import axeutils
from axeutils.logger import AxeLog
from axeutils.config import get_config_from_file
from axeutils import check_imports, clean_up
import docopt
from tabulate import tabulate
from operator import itemgetter

###############################################################################
# CONFIG - Begin
###############################################################################

CONST_DIR_TMP = "/tmp"
CONST_AXE_ROOT = os.getenv('AXE_ROOT', '')
CONST_CB_ROOT = os.getenv('CLOUDBUILDER_ROOT', None)
DEFAULT_ENV_DIR = '/tmp'

###############################################################################
# CONFIG - End (Do Not Edit Below)
###############################################################################

_log = AxeLog(__file__)
check_imports()

from colorama import init as colorama_init
from colorama import Fore as FG, Back as BG, Style as STYLE
colorama_init()

###############################################################################
# CONFIG - Begin
###############################################################################

FILE_CHECKLIST = [
    'stack_config.yaml',
    'cloudformation.template',
    'authentication_config.yaml',
    'sg-aliases.md',
    'sg-groups.md',
    'sg-rules.md',
    'instances.md',
    'elbs.md'
]

TABLE_HEADER = [
    'Stack Name',
    'Relative Path',
    'Config',
    'Template',
    'Auth',
    'SG-Aliases',
    'SG-Groups',
    'SG-Rules',
    'Instances',
    'ELB'
]

###############################################################################
# CONFIG - End (Do Not Edit Below)
###############################################################################

###############################################################################
# Functions
###############################################################################


def walk_level(some_dir, level=1):
    '''Functions just like os.walk() but with the abaility to limit how many
    levels it traverses'''

    some_dir = some_dir.rstrip(os.path.sep)
    assert os.path.isdir(some_dir)
    num_sep = some_dir.count(os.path.sep)
    for root, dirs, files in os.walk(some_dir):
        yield root, dirs, files
        num_sep_this = root.count(os.path.sep)
        if num_sep + level <= num_sep_this:
            del dirs[:]


def validate_environment(env_root):
    '''Checks a given environment path for the presence of several config files
    and returns True if all of the config files are found as expected'''

    global FILE_CHECKLIST
    files = os.listdir(env_root)
    present_text = FG.GREEN + 'Yes' + STYLE.RESET_ALL
    absent_text = FG.RED + 'No' + STYLE.RESET_ALL

    has_necessary_files = set(FILE_CHECKLIST).issubset(set(files))
    checks = [present_text if cf in files else absent_text for cf in FILE_CHECKLIST]

    return has_necessary_files, checks


def list_environments(cbroot='~/.cloudbuilder', format='simple'):
    '''List the available environments that can be used with cloudbuilder'''

    global TABLE_HEADER
    _log.debug('Building list of environment names in {0}'.format(cbroot))

    # We'll check for the presence of stack_config.yaml in the directory to
    # determine if there's a valid environment present. Without this file the
    # other files are worthless
    cfgfile = 'stack_config.yaml'

    from os.path import expanduser
    base_dir = expanduser(cbroot)
    potential_envs = [root for (root, dirs, files) in os.walk(base_dir) if cfgfile in files]
    _log.debug('Found possible environments: {0}'.format(len(potential_envs)))

    table = []
    for e in potential_envs:
        _log.debug('Attempting to validate {}'.format(e))
        is_valid, checks = validate_environment(e)
        params = get_config_from_file('{}/{}'.format(e, cfgfile))
        row = []
        row.append(params['stack_name'])
        row.append(e.replace('{}/'.format(base_dir), ''))
        row += checks
        table.append(row)

    table = sorted(table, key=itemgetter(0, 1))
    print(tabulate(table, headers=TABLE_HEADER, tablefmt=format))


def main(options):
    """
    The main program function
    """
    if options['--debug'] is True:
        import logging
        _log.setLevel(logging.DEBUG)

    for key, value in iteritems(options):
        _log.debug('command-line options: {}: {}'.format(key, value))

    try:

        list_environments(cbroot=options['--cb-root'], format=options['--format'])

    except KeyboardInterrupt:
        _log.info('Interrupted.. (try with -v for verbose mode if you need more info)')
        clean_up(-1)

    except AssertionError, e:
        _log.warn(e)
        clean_up(-1)

    clean_up()


if __name__ == "__main__":

    try:
        options = docopt.docopt(__doc__)
        main(options)

    # Handle invalid options
    except docopt.DocoptExit as e:
        print(e.message)
