#!/usr/bin/env bash
#
# Simple credentials report
#

##############################################################################
# Shell Behaviour
##############################################################################

# Check for unbound variables being used
# set -o nounset

# Exit is a bad command is attempted. If you're going to handle errors then
# leave this disabled
# set -o errexit

# Exit if any of the commands in a pipeline exit with a non-zero exit code
# set -o pipefail

##############################################################################
# Variables
##############################################################################

CONST_COMMAND_LINE="$@"
CONST_OS_VERSION=$(uname -r)
CONST_SYSTEM_TYPE=$(uname -m)
CONST_SCRIPT_NAME=${0##*/}

# The PROJECT_ROOT is TWO level up from where the scripts run in the
# 'bin/subcommands' directory
PROJECT_ROOT=$( cd "$( dirname "${BASH_SOURCE[0]}" )/../../" && pwd )

# Load the Frameverk
. ${PROJECT_ROOT}/etc/axerc

# Current logging config
TTY_OUTPUT_ENABLED=$TRUE
LOG_OUTPUT_ENABLED=$TRUE
SYSLOG_OUTPUT_ENABLED=$FALSE
EVENT_OUTPUT_ENABLED=$TRUE
export TTY_OUTPUT_ENABLED LOG_OUTPUT_ENABLED SYSLOG_OUTPUT_ENABLED EVENT_OUTPUT_ENABLED

# Default log file
DEFAULT_OUT="${PROJECT_ROOT}/log/${CONST_SCRIPT_NAME}.log"
# Define somewhere for specific log messages to go
EVENT_LOG="${PROJECT_ROOT}/log/${CONST_SCRIPT_NAME}_events.log"
export DEFAULT_OUT EVENT_LOG

# Trap  abnormal termination
trap cleanup 1 2 3 15


##############################################################################
# Functions
##############################################################################

show_usage() {
    cat <<EOF
usage: $CONST_SCRIPT_NAME [--help] [-d <DIR>]

Attempts to dump all of the AWS account in Terraform format to the specified
directory (defaults to current working directory)

This wrapper script relies on the Terraforming tool available from
https://github.com/dtan4/terraforming and will not function without it.

EOF
}


cleanup() {
    echo "Exiting."
    exit 1
}


# show help for no arguments if stdin is a terminal
if [ "$1" == '-h' ] || [ "$1" == '--help' ] || [ "$1" == 'help' ]; then
    show_usage
    exit 0
fi

# As there's only 1 option it's value will be in $2
output_dir="${2:-$(pwd)}"


##############################################################################
# Main Script
##############################################################################

_log "$LINENO" "Checking for terraforming support"
which terraforming > /dev/null 2> /dev/null
if [ $? -ne 0 ]; then
    _log "$LINENO" "No terraforming support"
    cleanup
fi

_log "$LINENO" "Ensuring target path exists"
[ -d "${output_dir}" ] || mkdir -p "${output_dir}"

# Dipshit detection
if [ -f "${output_dir}/terraform.tfstate" ]; then
    _log "$LINENO" "Existing terraform.tfstate file found! Please remove it"
    cleanup
fi

resources=$(terraforming | grep terraforming | awk '{print $2}' | grep -v help)

_log "$LINENO" "Generate an initial tfstate"
terraforming asg --tfstate > terraform.tfstate

_log "$LINENO" "Dumping the state for each resource type available"
for res in $resources; do
    _log "$LINENO" "Dumping ${res}"
    terraforming $res --tfstate --merge=terraform.tfstate --overwrite
    terraforming $res > "aws-${res}.tf"
done

_log "$LINENO" "Done"
