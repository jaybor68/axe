#!/usr/bin/env python

"""
Basic wrapper script to list AWS images that are accessable from the
currently loaded AWS credentials. By default only lists images in our account

Usage:
    axe-image-list [options]
    axe-image-list ( -h | --help )

Options:
    -f <format>, --format=<format>
                         Supported values are; plain, simple, grid, pipe,
                         orgtbl, rst, mediawiki, latex [default: simple]
    -x, --extra-detail   Enable more detailed output
    -h, --help           Show this help message and exit
    --debug              Show more verbose logging

"""
from future.utils import iteritems

import os
import axeutils
from axeutils.logger import AxeLog
from axeutils.config import get_config_from_file
from axeutils import check_imports, clean_up
import docopt
from tabulate import tabulate
from operator import itemgetter

###############################################################################
# CONFIG - Begin
###############################################################################

###############################################################################
# CONFIG - End (Do Not Edit Below)
###############################################################################

_log = AxeLog(__file__)
check_imports()

from boto import ec2

###############################################################################
# CONFIG - Begin
###############################################################################

OUTPUT_HEADER_NORMAL = [
    'Name',
    'CreationDate',
    'ImageId',
    'Arch',
    'Description',
    'Public'
]

OUTPUT_HEADER_VERBOSE = [
    'Name',
    'CreationDate',
    'ImageId',
    'Arch',
    'Description',
    'Public',
    'ImageType'
]

###############################################################################
# CONFIG - End (Do Not Edit Below)
###############################################################################

###############################################################################
# Functions
###############################################################################


def main(options):
    """
    The main program function
    """

    if options['--debug'] is True:
        import logging
        _log.setLevel(logging.DEBUG)

    for key, value in iteritems(options):
        _log.debug('command-line options: {}: {}'.format(key, value))

    try:

        # Even though the Boto lib can use the environment variables we'll import some
        # for easier re-use in this script
        aws_region = os.getenv('AWS_DEFAULT_REGION')
        ec2_conn = ec2.connect_to_region(aws_region)
        images = ec2_conn.get_all_images(owners=['self'])

        table = []

        for i in images:

            ami_name = i.name
            ami_id = i.id
            ami_arch = i.architecture
            ami_created = i.creationDate
            ami_pub = 'No' if (i.is_public == 0) else 'Yes'
            ami_desc = i.description
            ami_type = i.type

            table.append([
                ami_name,
                ami_created,
                ami_id,
                ami_arch,
                ami_desc,
                ami_pub,
                ami_type
            ])

        if options['--extra-detail'] is True:
            table_headers = OUTPUT_HEADER_VERBOSE
            table = sorted(table, key=itemgetter(0, 1))
        else:
            # If the verbose flag is not set then remove some of the fields
            filter_indexes = (0, 1, 2, 3, 4, 5)
            filtered_table = [[row[i] for i in filter_indexes] for row in table]
            table_headers = OUTPUT_HEADER_NORMAL
            table = sorted(filtered_table, key=itemgetter(0, 1))

        print(tabulate(table, headers=table_headers, tablefmt=options['--format']))

    except AssertionError as e:
        _log.warn(e)
        clean_up(-1)

    clean_up()


if __name__ == "__main__":

    try:
        options = docopt.docopt(__doc__)
        main(options)

    # Handle invalid options
    except docopt.DocoptExit as e:
        print(e.message)
