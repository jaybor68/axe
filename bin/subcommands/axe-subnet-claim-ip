#!/usr/bin/env bash
#
# Simple utility script to claim and then release an available IP address from
# the specified subnet-id by allocating and then deleting an ENI in the same
# subnet
#

##############################################################################
# Shell Behaviour
##############################################################################

# Check for unbound variables being used
# set -o nounset

# Exit is a bad command is attempted. If you're going to handle errors then
# leave this disabled
# set -o errexit

# Exit if any of the commands in a pipeline exit with a non-zero exit code
# set -o pipefail

##############################################################################
# Variables
##############################################################################

CONST_COMMAND_LINE="$@"
CONST_OS_VERSION=$(uname -r)
CONST_SYSTEM_TYPE=$(uname -m)
CONST_SCRIPT_NAME=${0##*/}

# The PROJECT_ROOT is TWO level up from where the scripts run in the
# 'bin/subcommands' directory
PROJECT_ROOT=$( cd "$( dirname "${BASH_SOURCE[0]}" )/../../" && pwd )

# Load the Frameverk
. ${PROJECT_ROOT}/etc/axerc

# Current logging config
TTY_OUTPUT_ENABLED=$TRUE
LOG_OUTPUT_ENABLED=$TRUE
SYSLOG_OUTPUT_ENABLED=$FALSE
EVENT_OUTPUT_ENABLED=$TRUE
export TTY_OUTPUT_ENABLED LOG_OUTPUT_ENABLED SYSLOG_OUTPUT_ENABLED EVENT_OUTPUT_ENABLED

# Default log file
DEFAULT_OUT="${PROJECT_ROOT}/log/${CONST_SCRIPT_NAME}.log"
# Define somewhere for specific log messages to go
EVENT_LOG="${PROJECT_ROOT}/log/${CONST_SCRIPT_NAME}_events.log"
export DEFAULT_OUT EVENT_LOG

# Trap  abnormal termination
trap cleanup 1 2 3 15


##############################################################################
# Functions
##############################################################################

show_usage() {
    cat <<EOF
usage: $CONST_SCRIPT_NAME [--help] [-s <SUBNET-ID>]

Simple utility script to claim and then release an available IP address from
the specified subnet-id by allocating and then deleting an ENI in the same
subnet

Useful if you need to determine which Private VPC adddresses can be used as
reserved DHCP allocations (aka static private VPC IP on AWS)

EOF
}


cleanup() {
    echo "Exiting."
    exit 1
}


# show help for no arguments if stdin is a terminal
if [ "$1" == '-h' ] || [ "$1" == '--help' ] || [ "$1" == 'help' ]
then
    show_usage
    exit 0
fi

# As there's only 1 option it's value will be in $2
subnet_id="${2:-none}"

# show help for no arguments if stdin is a terminal
if [ "${subnet_id}" == 'none' ]
then
    show_usage
    exit 0
fi


claim_ip_from_subnet() {

    local subnet_id=$1
    # Create an ENI
    _log "$LINENO" "Requesting IP in subnet ${subnet_id}"
    buffer=$(mktemp ${PROJECT_ROOT}/tmp/eni-buffer.XXXXXXX)
    aws ec2 create-network-interface --subnet-id "${subnet_id}" --output=json \
        | tee "${buffer}" \
        | jq '.'

    # Parse the info
    eni_id=$(cat "${buffer}" | jq -r '.NetworkInterface["NetworkInterfaceId"]' | wash)
    new_ip=$(cat "${buffer}" | jq -r '.NetworkInterface["PrivateIpAddress"]' | wash)
    _log "$LINENO" "Detected IP allocation: ${new_ip} from ${eni_id}"

    # Delete the ENI
    _log "$LINENO" "Releasing ENI and IP"
    aws ec2 delete-network-interface --network-interface-id=${eni_id}
    rc_release=$?
    _log "$LINENO" "Done. Result Code ${rc_release}"

    # Cleanup
    [ -f "${buffer}" ] && rm "${buffer}"

}


##############################################################################
# Main Script
##############################################################################

claim_ip_from_subnet "${subnet_id}"
